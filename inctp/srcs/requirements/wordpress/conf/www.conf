[www]
user = www-data
group = www-data
#listen = 9000
listen = /run/php/php8.2-fpm.sock
listen.owner = www-data
listen.group = www-data
listen.mode = 0660
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 2
pm.max_spare_servers = 5



# PHP-FPM pool configuration (www)
# Optimized for single-server setup using Unix socket
#
# Explanations:
# - user / group: the UNIX user and group PHP-FPM processes run as
# - listen: socket path for communication with web server (faster and more secure than TCP)
# - listen.owner / listen.group / listen.mode: ownership and permissions of the socket
# - pm: process manager mode ("dynamic" adjusts processes based on load)
# - pm.max_children: maximum number of PHP-FPM processes
# - pm.start_servers: processes created at startup
# - pm.min_spare_servers: minimum number of idle processes
# - pm.max_spare_servers: maximum number of idle processes
# - Nginx example: fastcgi_pass unix:/run/php/php8.2-fpm.sock


# Конфигурация пула PHP-FPM (www)
# Оптимизировано для одного сервера с использованием Unix-сокета
#
# Объяснения:
# - user / group: пользователь и группа UNIX, от имени которых запускаются процессы PHP-FPM
# - listen: путь к сокету для связи с веб-сервером (быстрее и безопаснее, чем TCP)
# - listen.owner / listen.group / listen.mode: владелец, группа и права доступа к сокету
# - pm: режим управления процессами ("dynamic" подстраивает количество процессов под нагрузку)
# - pm.max_children: максимальное количество процессов PHP-FPM
# - pm.start_servers: количество процессов при запуске
# - pm.min_spare_servers: минимальное количество простаивающих процессов
# - pm.max_spare_servers: максимальное количество простаивающих процессов
# - Пример для Nginx: fastcgi_pass unix:/run/php/php8.2-fpm.sock;